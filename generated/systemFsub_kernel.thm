Specification "systemFsub_kernel".



Theorem subsumption_in_contexts: forall T1 T2, {subtype T1 T2} -> nabla x, {subtype x T1 |- subtype x T2}. 
intros . search.


Theorem inversion_subtype_arrow : forall Typ T1' T2', {subtype Typ (arrow T1' T2')} -> (exists T1 T2,  Typ = (arrow T1 T2) /\ {subtype T1' T1} /\ {subtype T2 T2'}).
induction on 1. intros Main. Subtype1 : case Main(keep). 

search.
 search.
 Arg_2_1 : apply IH to Subtype2. Arg_1_1 : apply IH to Subtype1. search.



Theorem inversion_subtype_all : forall Typ T R', {subtype Typ (all T R')} -> (exists R, nabla x,  Typ = (all T R) /\ {subtype T T} /\ {subtype x T => subtype (R x) (R' x)}).
induction on 1. intros Main. Subtype1 : case Main(keep). 

search.
 search.
 Arg_2_1 : apply IH to Subtype2. Arg_1_1 : apply IH to Subtype1. New1 : apply subsumption_in_contexts to Arg_2_1. cut Arg_1_2 with New1.
 search.



Theorem inversion_typing_abs : forall T1 R T1' T2', {typeOf (abs T1 R) (arrow T1' T2')} -> exists T2, nabla x, {typeOf x T1 => typeOf (R x) T2} /\ {subtype T1' T1} /\ {subtype T2 T2'}.

induction on 1. intros Main. Subtype1 : case Main. 

search.
 Arg_1_1 : apply inversion_subtype_arrow to Subtype2. Arg_2_1 : apply IH to Subtype1. search.



Theorem inversion_typing_absT : forall T R2 T' R', {typeOf (absT T R2) (all T' R')} -> exists R, nabla x, {subtype x T => typeOf (R2 x) (R x)} /\ {subtype T' T'} /\ {subtype x T' => subtype (R x) (R' x)} /\ T = T'.

induction on 1. intros Main. Subtype1 : case Main. 

search.
 Arg_1_1 : apply inversion_subtype_all to Subtype2. Arg_2_1 : apply IH to Subtype1. New1 : apply subsumption_in_contexts to Arg_1_1. cut Arg_2_3 with New1.
 search.





Theorem  canonical_form_arrow : forall E T1 T2, {typeOf E (arrow T1 T2)} -> {value E} -> (exists Arg1 Arg2, E = (abs Arg1 Arg2)).
induction on 1. 

intros  Main Value. Subsumption : case Main.
 case Value. search.

 case Value. case Value.
  apply inversion_subtype_arrow to Subsumption1. apply IH to Subsumption Value. search.


Theorem  canonical_form_all : forall E T1 U2, {typeOf E (all T1 U2)} -> {value E} -> (exists Arg1 Arg2, E = (absT Arg1 Arg2)).
induction on 1. 

intros  Main Value. Subsumption : case Main.
 case Value. search.

 case Value. case Value.
  apply inversion_subtype_all to Subsumption1. apply IH to Subsumption Value. search.




Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_abs : forall T1 R2 T, {typeOf ((abs T1 R2)) T} -> progresses ((abs T1 R2)).

 search.



Theorem progress_app : forall E1 E2 T, {typeOf ((app E1 E2)) T} -> progresses E1 -> progresses E2 -> progresses ((app E1 E2)).
induction on 1. 

intros  Main PrgsE1 PrgsE2. TypeOfE1 : case Main. ProgressClause : case PrgsE1. case PrgsE2.
 Canonical : apply canonical_form_arrow to TypeOfE1 ProgressClause.   search. search. search. apply IH to TypeOfE1 PrgsE1 PrgsE2. search.



Theorem progress_absT : forall T1 R2 T, {typeOf ((absT T1 R2)) T} -> progresses ((absT T1 R2)).

 search.



Theorem progress_appT : forall E1 T2 T, {typeOf ((appT E1 T2)) T} -> progresses E1 -> progresses ((appT E1 T2)).
induction on 1. 

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_all to TypeOfE1 ProgressClause.   search. search. apply IH to TypeOfE1 PrgsE1. search.



Theorem progress_topObj : forall  T, {typeOf ((topObj )) T} -> progresses ((topObj )).

 search.





Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. TypeOfE1 : case Main.
 backchain progress_abs.
  backchain progress_absT.
  backchain progress_topObj.

 apply IH to TypeOfE1. apply IH to TypeOfE2. backchain progress_app.
 apply IH to TypeOfE1. backchain progress_appT.

 
  apply IH to TypeOfE1. search.


Theorem preservation : forall Exp Exp' Typ, {typeOf Exp Typ} -> {step Exp Exp'} -> {typeOf Exp' Typ}.
induction on 1. intros  Main Step. Hyp1 : case Main.
 Step : case Step.
 Step : case Step.
 Step : case Step.
 Step : case Step. Hyp1 : apply inversion_typing_abs to Hyp1. CutHyp : assert ({typeOf E2 T1}). ToCut : inst Hyp3 with n1 = E2. cut ToCut with CutHyp. clear CutHyp. clear ToCut. search.
 apply IH to Hyp1 Step. search.
 apply IH to Hyp2 Step. search.

 Step : case Step. Hyp1 : apply inversion_typing_absT to Hyp1. CutHyp : assert ({subtype X T'}). ToCut : inst Hyp3 with n1 = X. cut ToCut with CutHyp. clear CutHyp. clear ToCut. CutHyp : assert ({subtype X T'}). ToCut : inst Hyp5 with n1 = X. cut ToCut with CutHyp. clear CutHyp. clear ToCut. search.
 apply IH to Hyp1 Step. search.

 apply IH to Hyp1 Step. search.




Theorem preservation_nstep : forall Exp Exp' Typ, {typeOf Exp Typ} -> {nstep Exp Exp'} -> {typeOf Exp' Typ}. 
induction on 2. intros. case H2. search. 
apply preservation to H1 H3. apply IH to H5 H4. search. 


Theorem type_soundness : forall E E' T, {typeOf E T} -> {nstep E E'} -> 
({value E'} /\ {typeOf E' T}) \/ exists E'', ({step E' E''} /\ {typeOf E''  T}).
induction on 2. intros Main NStep. 
TypeOfEPrime : apply preservation_nstep to Main NStep. Step1 : case NStep. 
Progress : apply progress to TypeOfEPrime.
case Progress. search. apply preservation to TypeOfEPrime H1. search.
TypeOfE2: apply preservation to Main Step1. backchain IH with E = E2.
