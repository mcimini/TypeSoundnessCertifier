Specification "fpl_cbv".







Theorem  canonical_form_arrow : forall E T1 T2, {typeOf E (arrow T1 T2)} -> {value E} -> (exists Arg1 Arg2, E = (abs Arg1 Arg2)).

intros  Main Value. Subsumption : case Main.
 case Value. search.

 case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value.
 case Value. case Value.



Theorem  canonical_form_int : forall E, {typeOf E (int )} -> {value E} -> (exists Arg1, E = (succ Arg1) /\ {value Arg1}) \/ E = (zero ).

intros  Main Value. Subsumption : case Main.
 case Value. search.
 case Value. search.

 case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value.
 case Value. case Value.



Theorem  canonical_form_bool : forall E, {typeOf E (bool )} -> {value E} -> E = (ff ) \/ E = (tt ).

intros  Main Value. Subsumption : case Main.
 case Value. search.
 case Value. search.

 case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value.
 case Value. case Value.



Theorem  canonical_form_times : forall E T1 T2, {typeOf E (times T1 T2)} -> {value E} -> (exists Arg1 Arg2, E = (pair Arg1 Arg2) /\ {value Arg1} /\ {value Arg2}).

intros  Main Value. Subsumption : case Main.
 case Value. search.

 case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value.
 case Value. case Value.



Theorem  canonical_form_sum : forall E T1 T2, {typeOf E (sum T1 T2)} -> {value E} -> (exists Arg1, E = (inr Arg1) /\ {value Arg1}) \/ (exists Arg1, E = (inl Arg1) /\ {value Arg1}).

intros  Main Value. Subsumption : case Main.
 case Value. search.
 case Value. search.

 case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value.
 case Value. case Value.



Theorem  canonical_form_list : forall E T1, {typeOf E (list T1)} -> {value E} -> (exists Arg1 Arg2, E = (cons Arg1 Arg2) /\ {value Arg1} /\ {value Arg2}) \/ E = (emptyList ).

intros  Main Value. Subsumption : case Main.
 case Value. search.
 case Value. search.

 case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value.
 case Value. case Value.



Theorem  canonical_form_all : forall E U1, {typeOf E (all U1)} -> {value E} -> (exists Arg1, E = (absT Arg1)).

intros  Main Value. Subsumption : case Main.
 case Value. search.

 case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value.
 case Value. case Value.



Theorem  canonical_form_mu : forall E U1, {typeOf E (mu U1)} -> {value E} -> (exists Arg1 Arg2, E = (fold Arg1 Arg2) /\ {value Arg1}).

intros  Main Value. Subsumption : case Main.
 case Value. search.

 case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value. case Value.
 case Value. case Value.





Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := {error E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_abs : forall T1 R2 T, {typeOf ((abs T1 R2)) T} -> progresses ((abs T1 R2)).

 search.



Theorem progress_app : forall E1 E2 T, {typeOf ((app E1 E2)) T} -> progresses E1 -> progresses E2 -> progresses ((app E1 E2)).

intros  Main PrgsE1 PrgsE2. TypeOfE1 : case Main. ProgressClause : case PrgsE1. case PrgsE2.
 Canonical : apply canonical_form_arrow to TypeOfE1 ProgressClause.   search. search. search. search. search.



Theorem progress_succ : forall E1 T, {typeOf ((succ E1)) T} -> progresses E1 -> progresses ((succ E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. search. search.



Theorem progress_zero : forall  T, {typeOf ((zero )) T} -> progresses ((zero )).

 search.



Theorem progress_pred : forall E1 T, {typeOf ((pred E1)) T} -> progresses E1 -> progresses ((pred E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_int to TypeOfE1 ProgressClause. case Canonical.  search. search. search. search.



Theorem progress_ff : forall  T, {typeOf ((ff )) T} -> progresses ((ff )).

 search.



Theorem progress_tt : forall  T, {typeOf ((tt )) T} -> progresses ((tt )).

 search.



Theorem progress_if : forall E1 E2 E3 T, {typeOf ((if E1 E2 E3)) T} -> progresses E1 -> progresses ((if E1 E2 E3)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_bool to TypeOfE1 ProgressClause. case Canonical.  search. search. search. search.



Theorem progress_pair : forall E1 E2 T, {typeOf ((pair E1 E2)) T} -> progresses E1 -> progresses E2 -> progresses ((pair E1 E2)).

intros  Main PrgsE1 PrgsE2. TypeOfE1 : case Main. ProgressClause : case PrgsE1. case PrgsE2.
 search. search. search. search. search.



Theorem progress_fst : forall E1 T, {typeOf ((fst E1)) T} -> progresses E1 -> progresses ((fst E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_times to TypeOfE1 ProgressClause.   search. search. search.



Theorem progress_snd : forall E1 T, {typeOf ((snd E1)) T} -> progresses E1 -> progresses ((snd E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_times to TypeOfE1 ProgressClause.   search. search. search.



Theorem progress_inr : forall E1 T, {typeOf ((inr E1)) T} -> progresses E1 -> progresses ((inr E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. search. search.



Theorem progress_inl : forall E1 T, {typeOf ((inl E1)) T} -> progresses E1 -> progresses ((inl E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. search. search.



Theorem progress_case : forall E1 R2 R3 T, {typeOf ((case E1 R2 R3)) T} -> progresses E1 -> progresses ((case E1 R2 R3)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_sum to TypeOfE1 ProgressClause. case Canonical.  search. search. search. search.



Theorem progress_cons : forall E1 E2 T, {typeOf ((cons E1 E2)) T} -> progresses E1 -> progresses E2 -> progresses ((cons E1 E2)).

intros  Main PrgsE1 PrgsE2. TypeOfE1 : case Main. ProgressClause : case PrgsE1. case PrgsE2.
 search. search. search. search. search.



Theorem progress_emptyList : forall  T, {typeOf ((emptyList )) T} -> progresses ((emptyList )).

 search.



Theorem progress_head : forall E1 T, {typeOf ((head E1)) T} -> progresses E1 -> progresses ((head E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_list to TypeOfE1 ProgressClause. case Canonical.  search. search. search. search.



Theorem progress_tail : forall E1 T, {typeOf ((tail E1)) T} -> progresses E1 -> progresses ((tail E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_list to TypeOfE1 ProgressClause. case Canonical.  search. search. search. search.



Theorem progress_absT : forall R1 T, {typeOf ((absT R1)) T} -> progresses ((absT R1)).

 search.



Theorem progress_appT : forall E1 T2 T, {typeOf ((appT E1 T2)) T} -> progresses E1 -> progresses ((appT E1 T2)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_all to TypeOfE1 ProgressClause.   search. search. search.



Theorem progress_fold : forall E1 U2 T, {typeOf ((fold E1 U2)) T} -> progresses E1 -> progresses ((fold E1 U2)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. search. search.



Theorem progress_unfold : forall E1 T, {typeOf ((unfold E1)) T} -> progresses E1 -> progresses ((unfold E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_mu to TypeOfE1 ProgressClause.   search. search. search.



Theorem progress_letrec : forall T1 R2 R3 T, {typeOf ((letrec T1 R2 R3)) T} -> progresses ((letrec T1 R2 R3)).

 search.



Theorem progress_fix : forall E1 T, {typeOf ((fix E1)) T} -> progresses E1 -> progresses ((fix E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. search. search.



Theorem progress_try : forall E1 E2 T, {typeOf ((try E1 E2)) T} -> progresses E1 -> progresses ((try E1 E2)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. case ProgressClause. search. search.



Theorem progress_raise : forall E1 T, {typeOf ((raise E1)) T} -> progresses E1 -> progresses ((raise E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. search. search.





Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. TypeOfE1 : case Main.
 backchain progress_abs.
 apply IH to TypeOfE1. backchain progress_succ.
  backchain progress_zero.
  backchain progress_ff.
  backchain progress_tt.
 apply IH to TypeOfE1. apply IH to TypeOfE2. backchain progress_pair.
 apply IH to TypeOfE1. backchain progress_inr.
 apply IH to TypeOfE1. backchain progress_inl.
 apply IH to TypeOfE1. apply IH to TypeOfE2. backchain progress_cons.
  backchain progress_emptyList.
  backchain progress_absT.
 apply IH to TypeOfE1. backchain progress_fold.

 apply IH to TypeOfE1. apply IH to TypeOfE2. backchain progress_app.
 apply IH to TypeOfE1. backchain progress_pred.
 apply IH to TypeOfE1. backchain progress_if.
 apply IH to TypeOfE1. backchain progress_fst.
 apply IH to TypeOfE1. backchain progress_snd.
 apply IH to TypeOfE1. backchain progress_case.
 apply IH to TypeOfE1. backchain progress_head.
 apply IH to TypeOfE1. backchain progress_tail.
 apply IH to TypeOfE1. backchain progress_appT.
 apply IH to TypeOfE1. backchain progress_unfold.

  backchain progress_letrec.
 apply IH to TypeOfE1. backchain progress_fix.

 apply IH to TypeOfE1. backchain progress_try.
 apply IH to TypeOfE1. backchain progress_raise.




Theorem error_types_all: forall E T1 T2, {typeOf E T1} -> {error E} -> {typeOf E T2}. 

intros Hyp1 Error. case Error. case Hyp1. 

search.

Theorem preservation : forall Exp Exp' Typ, {typeOf Exp Typ} -> {step Exp Exp'} -> {typeOf Exp' Typ}.
induction on 1. intros  Main Step. Hyp1 : case Main.
 Step : case Step.
 Step : case Step. apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step.
 Step : case Step.
 Step : case Step.
 Step : case Step. apply IH to Hyp1 Step. search.
 apply IH to Hyp2 Step. search.
 backchain error_types_all. backchain error_types_all.
 Step : case Step. apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. apply IH to Hyp1 Step. search.
 apply IH to Hyp2 Step. search.
 backchain error_types_all. backchain error_types_all.
 Step : case Step.
 Step : case Step.
 Step : case Step. apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. Hyp1 : case Hyp1(keep). CutHyp : assert ({typeOf E2 T1}). ToCut : inst Hyp3 with n1 = E2. cut ToCut with CutHyp. clear CutHyp. clear ToCut. search.
 apply IH to Hyp1 Step. search.
 apply IH to Hyp2 Step. search.
 backchain error_types_all. backchain error_types_all.
 Step : case Step. Hyp1 : case Hyp1(keep). search.
 Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. Hyp1 : case Hyp1(keep). search.
 Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. Hyp1 : case Hyp1(keep). CutHyp : assert ({typeOf E T1}). ToCut : inst Hyp2 with n1 = E. cut ToCut with CutHyp. clear CutHyp. clear ToCut. search.
 Hyp1 : case Hyp1(keep). CutHyp : assert ({typeOf E T2}). ToCut : inst Hyp3 with n1 = E. cut ToCut with CutHyp. clear CutHyp. clear ToCut. search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. Hyp1 : case Hyp1(keep). search.
 Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. Hyp1 : case Hyp1(keep). search.
 Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. Hyp1 : case Hyp1(keep). inst Hyp2 with n1 = X. search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. CutHyp : assert ({typeOf (fix (abs T1 R1)) T1}). ToCut : inst Hyp2 with n1 = (fix (abs T1 R1)). cut ToCut with CutHyp. clear CutHyp. clear ToCut. search.

 Step : case Step. search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. search.
 Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.

 Step : case Step. apply IH to Hyp1 Step. search.
 backchain error_types_all.





Theorem preservation_nstep : forall Exp Exp' Typ, {typeOf Exp Typ} -> {nstep Exp Exp'} -> {typeOf Exp' Typ}. 
induction on 2. intros. case H2. search. 
apply preservation to H1 H3. apply IH to H5 H4. search. 


Theorem type_soundness : forall E E' T, {typeOf E T} -> {nstep E E'} -> 
({value E'} /\ {typeOf E' T}) \/ {error E'} \/ exists E'', ({step E' E''} /\ {typeOf E''  T}).
induction on 2. intros Main NStep. 
TypeOfEPrime : apply preservation_nstep to Main NStep. Step1 : case NStep. 
Progress : apply progress to TypeOfEPrime.
case Progress. search. search. apply preservation to TypeOfEPrime H1. search. 
TypeOfE2: apply preservation to Main Step1. backchain IH with E = E2.
