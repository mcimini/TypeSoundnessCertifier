Specification "tuples_lazy".







Theorem  canonical_form_times5 : forall E T1 T2 T3 T4 T5, {typeOf E (times5 T1 T2 T3 T4 T5)} -> {value E} -> (exists Arg1 Arg2 Arg3 Arg4 Arg5, E = (tuple5 Arg1 Arg2 Arg3 Arg4 Arg5)).

intros  Main Value. Subsumption : case Main.
 case Value. search.

 case Value. case Value. case Value. case Value. case Value.
 




Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_tuple5 : forall E1 E2 E3 E4 E5 T, {typeOf ((tuple5 E1 E2 E3 E4 E5)) T} -> progresses ((tuple5 E1 E2 E3 E4 E5)).

 search.



Theorem progress_select1 : forall E1 T, {typeOf ((select1 E1)) T} -> progresses E1 -> progresses ((select1 E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_times5 to TypeOfE1 ProgressClause.   search. search.



Theorem progress_select2 : forall E1 T, {typeOf ((select2 E1)) T} -> progresses E1 -> progresses ((select2 E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_times5 to TypeOfE1 ProgressClause.   search. search.



Theorem progress_select3 : forall E1 T, {typeOf ((select3 E1)) T} -> progresses E1 -> progresses ((select3 E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_times5 to TypeOfE1 ProgressClause.   search. search.



Theorem progress_select4 : forall E1 T, {typeOf ((select4 E1)) T} -> progresses E1 -> progresses ((select4 E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_times5 to TypeOfE1 ProgressClause.   search. search.



Theorem progress_select5 : forall E1 T, {typeOf ((select5 E1)) T} -> progresses E1 -> progresses ((select5 E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_times5 to TypeOfE1 ProgressClause.   search. search.





Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. TypeOfE1 : case Main.
 backchain progress_tuple5.

 apply IH to TypeOfE1. backchain progress_select1.
 apply IH to TypeOfE1. backchain progress_select2.
 apply IH to TypeOfE1. backchain progress_select3.
 apply IH to TypeOfE1. backchain progress_select4.
 apply IH to TypeOfE1. backchain progress_select5.

 
 


Theorem preservation : forall Exp Exp' Typ, {typeOf Exp Typ} -> {step Exp Exp'} -> {typeOf Exp' Typ}.
induction on 1. intros  Main Step. Hyp1 : case Main.
 Step : case Step.
 Step : case Step. Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.

 Step : case Step. Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.

 Step : case Step. Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.

 Step : case Step. Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.

 Step : case Step. Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.






Theorem preservation_nstep : forall Exp Exp' Typ, {typeOf Exp Typ} -> {nstep Exp Exp'} -> {typeOf Exp' Typ}. 
induction on 2. intros. case H2. search. 
apply preservation to H1 H3. apply IH to H5 H4. search. 


Theorem type_soundness : forall E E' T, {typeOf E T} -> {nstep E E'} -> 
({value E'} /\ {typeOf E' T}) \/ exists E'', ({step E' E''} /\ {typeOf E''  T}).
induction on 2. intros Main NStep. 
TypeOfEPrime : apply preservation_nstep to Main NStep. Step1 : case NStep. 
Progress : apply progress to TypeOfEPrime.
case Progress. search. apply preservation to TypeOfEPrime H1. search.
TypeOfE2: apply preservation to Main Step1. backchain IH with E = E2.
