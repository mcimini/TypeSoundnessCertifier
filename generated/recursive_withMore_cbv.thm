Specification "recursive_withMore_cbv".







Theorem  canonical_form_arrow : forall E T1 T2, {typeOf E (arrow T1 T2)} -> {value E} -> (exists Arg1, E = (abs Arg1)).

intros  Main Value. Subsumption : case Main.
 case Value. search.

 case Value. case Value. case Value. case Value. case Value. case Value.
 case Value. case Value.



Theorem  canonical_form_mu : forall E U1, {typeOf E (mu U1)} -> {value E} -> (exists Arg1 Arg2, E = (fold Arg1 Arg2) /\ {value Arg1}).

intros  Main Value. Subsumption : case Main.
 case Value. search.

 case Value. case Value. case Value. case Value. case Value. case Value.
 case Value. case Value.



Theorem  canonical_form_list : forall E T1, {typeOf E (list T1)} -> {value E} -> (exists Arg1 Arg2, E = (cons Arg1 Arg2) /\ {value Arg1} /\ {value Arg2}) \/ E = (emptyList ).

intros  Main Value. Subsumption : case Main.
 case Value. search.
 case Value. search.

 case Value. case Value. case Value. case Value. case Value. case Value. case Value.
 case Value. case Value.



Theorem  canonical_form_bool : forall E, {typeOf E (bool )} -> {value E} -> E = (ff ) \/ E = (tt ).

intros  Main Value. Subsumption : case Main.
 case Value. search.
 case Value. search.

 case Value. case Value. case Value. case Value. case Value. case Value.
 case Value. case Value.





Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := {error E} ;
	 progresses E := exists E', {step E E'}.

Theorem progress_abs : forall R1 T, {typeOf ((abs R1)) T} -> progresses ((abs R1)).

 search.



Theorem progress_app : forall E1 E2 T, {typeOf ((app E1 E2)) T} -> progresses E1 -> progresses E2 -> progresses ((app E1 E2)).

intros  Main PrgsE1 PrgsE2. TypeOfE1 : case Main. ProgressClause : case PrgsE1. case PrgsE2.
 Canonical : apply canonical_form_arrow to TypeOfE1 ProgressClause.   search. search. search. search. search.



Theorem progress_fold : forall E1 U2 T, {typeOf ((fold E1 U2)) T} -> progresses E1 -> progresses ((fold E1 U2)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. search. search.



Theorem progress_unfold : forall E1 T, {typeOf ((unfold E1)) T} -> progresses E1 -> progresses ((unfold E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_mu to TypeOfE1 ProgressClause.   search. search. search.



Theorem progress_cons : forall E1 E2 T, {typeOf ((cons E1 E2)) T} -> progresses E1 -> progresses E2 -> progresses ((cons E1 E2)).

intros  Main PrgsE1 PrgsE2. TypeOfE1 : case Main. ProgressClause : case PrgsE1. case PrgsE2.
 search. search. search. search. search.



Theorem progress_emptyList : forall  T, {typeOf ((emptyList )) T} -> progresses ((emptyList )).

 search.



Theorem progress_head : forall E1 T, {typeOf ((head E1)) T} -> progresses E1 -> progresses ((head E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_list to TypeOfE1 ProgressClause. case Canonical.  search. search. search. search.



Theorem progress_tail : forall E1 T, {typeOf ((tail E1)) T} -> progresses E1 -> progresses ((tail E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_list to TypeOfE1 ProgressClause. case Canonical.  search. search. search. search.



Theorem progress_ff : forall  T, {typeOf ((ff )) T} -> progresses ((ff )).

 search.



Theorem progress_tt : forall  T, {typeOf ((tt )) T} -> progresses ((tt )).

 search.



Theorem progress_if : forall E1 E2 E3 T, {typeOf ((if E1 E2 E3)) T} -> progresses E1 -> progresses ((if E1 E2 E3)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 Canonical : apply canonical_form_bool to TypeOfE1 ProgressClause. case Canonical.  search. search. search. search.



Theorem progress_excValue : forall  T, {typeOf ((excValue )) T} -> progresses ((excValue )).

 search.



Theorem progress_letrec : forall R1 R2 T, {typeOf ((letrec R1 R2)) T} -> progresses ((letrec R1 R2)).

 search.



Theorem progress_fix : forall E1 T, {typeOf ((fix E1)) T} -> progresses E1 -> progresses ((fix E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. search. search.



Theorem progress_try : forall E1 E2 T, {typeOf ((try E1 E2)) T} -> progresses E1 -> progresses ((try E1 E2)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. case ProgressClause. search. search.



Theorem progress_raise : forall E1 T, {typeOf ((raise E1)) T} -> progresses E1 -> progresses ((raise E1)).

intros  Main PrgsE1. TypeOfE1 : case Main. ProgressClause : case PrgsE1.
 search. search. search.





Theorem progress : forall E T, {typeOf E T} -> progresses E. 
induction on 1. intros Main. TypeOfE1 : case Main.
 backchain progress_abs.
 apply IH to TypeOfE1. backchain progress_fold.
 apply IH to TypeOfE1. apply IH to TypeOfE2. backchain progress_cons.
  backchain progress_emptyList.
  backchain progress_ff.
  backchain progress_tt.
  backchain progress_excValue.

 apply IH to TypeOfE1. apply IH to TypeOfE2. backchain progress_app.
 apply IH to TypeOfE1. backchain progress_unfold.
 apply IH to TypeOfE1. backchain progress_head.
 apply IH to TypeOfE1. backchain progress_tail.
 apply IH to TypeOfE1. backchain progress_if.

  backchain progress_letrec.
 apply IH to TypeOfE1. backchain progress_fix.

 apply IH to TypeOfE1. backchain progress_try.
 apply IH to TypeOfE1. backchain progress_raise.




Theorem error_types_all: forall E T1 T2, {typeOf E T1} -> {error E} -> {typeOf E T2}. 

intros Hyp1 Error. case Error. case Hyp1. 

search.

Theorem preservation : forall Exp Exp' Typ, {typeOf Exp Typ} -> {step Exp Exp'} -> {typeOf Exp' Typ}.
induction on 1. intros  Main Step. Hyp1 : case Main.
 Step : case Step.
 Step : case Step. apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. apply IH to Hyp1 Step. search.
 apply IH to Hyp2 Step. search.
 backchain error_types_all. backchain error_types_all.
 Step : case Step.
 Step : case Step.
 Step : case Step.
 Step : case Step.
 Step : case Step. Hyp1 : case Hyp1(keep). CutHyp : assert ({typeOf E2 T1}). ToCut : inst Hyp3 with n1 = E2. cut ToCut with CutHyp. clear CutHyp. clear ToCut. search.
 apply IH to Hyp1 Step. search.
 apply IH to Hyp2 Step. search.
 backchain error_types_all. backchain error_types_all.
 Step : case Step. Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. Hyp1 : case Hyp1(keep). search.
 Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. Hyp1 : case Hyp1(keep). search.
 Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. Hyp1 : case Hyp1(keep). search.
 Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. CutHyp : assert ({typeOf (fix (abs R1)) T1}). ToCut : inst Hyp2 with n1 = (fix (abs R1)). cut ToCut with CutHyp. clear CutHyp. clear ToCut. search.

 Step : case Step. search.
 apply IH to Hyp1 Step. search.
 backchain error_types_all.
 Step : case Step. search.
 Hyp1 : case Hyp1(keep). search.
 apply IH to Hyp1 Step. search.

 Step : case Step. apply IH to Hyp1 Step. search.
 backchain error_types_all.





Theorem preservation_nstep : forall Exp Exp' Typ, {typeOf Exp Typ} -> {nstep Exp Exp'} -> {typeOf Exp' Typ}. 
induction on 2. intros. case H2. search. 
apply preservation to H1 H3. apply IH to H5 H4. search. 


Theorem type_soundness : forall E E' T, {typeOf E T} -> {nstep E E'} -> 
({value E'} /\ {typeOf E' T}) \/ {error E'} \/ exists E'', ({step E' E''} /\ {typeOf E''  T}).
induction on 2. intros Main NStep. 
TypeOfEPrime : apply preservation_nstep to Main NStep. Step1 : case NStep. 
Progress : apply progress to TypeOfEPrime.
case Progress. search. search. apply preservation to TypeOfEPrime H1. search. 
TypeOfE2: apply preservation to Main Step1. backchain IH with E = E2.
